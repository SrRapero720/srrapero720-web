"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SrConsole = void 0;
// Librerias
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const process_1 = require("process");
// Modulos
const colors_js_1 = __importDefault(require("../tools/colors.js"));
const time_js_1 = __importDefault(require("../tools/time.js"));
// Utilidades
class SrConsoleUtil {
    config;
    _fileStream;
    constructor(config) {
        this.config = !config ? {} : config;
        this._fileStream = this.config.logs?.active ? fs_1.default.createWriteStream(path_1.default.join(process.cwd(), this.config.logs.path, '/logs.txt'), 'utf-8') : undefined;
    }
    memory = 0;
    _groups = 0;
    _counts = new Object({ index: 0 });
    stdOut = process_1.stdout;
    stdErr = process_1.stderr;
    stdIn = process_1.stdin;
    socketIO;
    _readMemory() {
        this.memory = Math.round((process.memoryUsage().heapUsed / 1024 / 1024) * 100) / 100;
        return;
    }
    _resolveTypeOfColor(values, color, method) {
        if (method === 'normal') {
            let resolvedString = '';
            values.forEach((msg, i, arr) => {
                try {
                    typeof msg === 'string' && (resolvedString += `${colors_js_1.default[color] + msg} `);
                    typeof msg === 'number' && (resolvedString += `${colors_js_1.default['green'] + msg.toString()} `);
                    typeof msg === 'boolean' && (resolvedString += `${colors_js_1.default['green'] + msg} `);
                    typeof msg === 'bigint' && (resolvedString += `${colors_js_1.default['green'] + msg.toString()} `);
                    typeof msg === 'function' && (resolvedString += `${colors_js_1.default['yellow'] + msg.toString()} `);
                    typeof msg === 'object' && (resolvedString += `${colors_js_1.default['red'] + msg.toString()} `);
                    typeof msg === 'symbol' && (resolvedString += `${colors_js_1.default['magenta'] + msg.toString()} `);
                    typeof msg === 'undefined' && (resolvedString += `${colors_js_1.default[color] + colors_js_1.default['underscore'] + 'undefined'} `);
                }
                catch (e) {
                    resolvedString += e;
                }
            });
            return resolvedString;
        }
        else {
            let resolvedString = '';
            values.forEach((msg, i, arr) => {
                try {
                    typeof msg === 'string' && (resolvedString += `${colors_js_1.default.Filtered['blue'] + msg} `);
                    typeof msg === 'number' && (resolvedString += `${colors_js_1.default.Filtered['green'] + msg.toString()} `);
                    typeof msg === 'boolean' && (resolvedString += `${colors_js_1.default.Filtered['green'] + msg} `);
                    typeof msg === 'bigint' && (resolvedString += `${colors_js_1.default.Filtered['green'] + msg.toString()} `);
                    typeof msg === 'function' && (resolvedString += `${colors_js_1.default.Filtered['yellow'] + msg.toString()} `);
                    typeof msg === 'object' && (resolvedString += `${colors_js_1.default.Filtered['red'] + msg.toString()} `);
                    typeof msg === 'symbol' && (resolvedString += `${colors_js_1.default.Filtered['magenta'] + msg.toString()} `);
                    typeof msg === 'undefined' && (resolvedString += `${colors_js_1.default.Filtered['blue'] + colors_js_1.default.Filtered['underscore'] + 'undefined'} `);
                }
                catch (e) {
                    resolvedString += e;
                }
            });
            return resolvedString;
        }
        ;
    }
    _sendToSockets(method, msg) {
        this.socketIO?.emit(`console:${method}`, msg);
    }
    async _printToConsole(color, std, message, optMessage) {
        let spaceGroups = ``;
        let i = 0;
        while (this._groups > i) {
            spaceGroups += `  `;
            i++;
        }
        const msg = `${spaceGroups}${new time_js_1.default().build(this.config.time)}${message} `;
        std === 'err' && (this.stdErr.write(colors_js_1.default[color] + msg + this._resolveTypeOfColor(optMessage, color, 'normal') + '\n' + colors_js_1.default.reset));
        std === 'in' && (this.stdIn.write(colors_js_1.default[color] + msg + this._resolveTypeOfColor(optMessage, color, 'normal') + '\n' + colors_js_1.default.reset));
        std === 'out' && (this.stdOut.write(colors_js_1.default[color] + msg + this._resolveTypeOfColor(optMessage, color, 'normal') + '\n' + colors_js_1.default.reset));
        this._sendToSockets(std, colors_js_1.default.Filtered[color] + msg + this._resolveTypeOfColor(optMessage, color, 'filtered') + colors_js_1.default.Filtered.reset);
        this._fileStream?.write(colors_js_1.default.Filtered[color] + msg + this._resolveTypeOfColor(optMessage, color, 'filtered') + '\n' + colors_js_1.default.Filtered.reset);
        this._readMemory();
    }
}
class SrConsole extends SrConsoleUtil {
    constructor(config) {
        super(config);
    }
    SocketIO(server) {
        this.socketIO = server;
        if (this.socketIO.engine)
            return true;
        else
            return false;
    }
    /**
     * @color Blue/Classic
     * @description Imprime en la consola los argumentos enviados en color Azul
     */
    log(msg, ...optMessage) {
        this._printToConsole('blue', 'out', msg, optMessage);
    }
    /**
     * @color Blue/Classic
     * @description Filtra palabras o simbolos (de un string) e imprime el resultado [solo funciona para el primer argumento]
     */
    send(msg, ...optMessage) {
        let msgClean = msg;
        if (this.config.filter) {
            this.config.filter.forEach((word, i, arr) => {
                msgClean = msgClean.replace(new RegExp(word, 'gi'), ' ');
            });
        }
        this._printToConsole('blue', 'out', msgClean, optMessage);
    }
    warn(msg, ...optMessage) {
        this._printToConsole('yellow', 'err', msg, optMessage);
    }
    debug(msg, ...optMessage) {
        this._printToConsole('cyan', 'out', msg, optMessage);
    }
    info(msg, ...optMessage) {
        this._printToConsole('cyan', 'out', msg, optMessage);
    }
    error(msg, ...optMessage) {
        this._printToConsole('red', 'err', msg, optMessage);
    }
    err(msg, ...optMessage) {
        this._printToConsole('red', 'err', msg, optMessage);
    }
    success(msg, ...optMessage) {
        this._printToConsole('green', 'out', msg, optMessage);
    }
    FatalE(msg) {
        this._printToConsole('bg_white', 'out', colors_js_1.default['red'] + msg, []);
    }
    assert(msg, ...optMessage) {
        this._printToConsole('yellow', 'err', msg, optMessage);
    }
    clear() {
        this._printToConsole('reset', 'out', '\n\n\n\n\n\n\n\n\n\n\n\n\n', []);
    }
    group(msg, ...optMessage) {
        this._printToConsole('magenta', 'out', msg, optMessage);
        this._groups++;
    }
    groupEnd(msg, ...optMessage) {
        if (this._groups !== 0)
            this._groups--;
        this._printToConsole('magenta', 'out', msg, optMessage);
    }
    groupCollapsed(msg, ...optMessage) {
        if (this._groups !== 0)
            this._groups--;
        this._printToConsole('magenta', 'out', msg, optMessage);
    }
    /**
     * @private
     */
    count() {
        //SOON
    }
    /**
     * @private
     */
    countReset() {
        //SOON
    }
    /**
     * @private
     */
    dir() {
        //SOON
    }
    /**
     * @private
     */
    dirxml() {
        //SOON
    }
    /**
     * @private
     */
    table() {
        //SOON
    }
    /**
     * @private
     */
    time() {
        //SOON
    }
    /**
     * @private
     */
    timeEnd() {
        //SOON
    }
    /**
     * @private
     */
    timeLog() {
        //SOON
    }
    /**
     * @private
     */
    timeStamp() {
        //SOON
    }
    /**
     * @private
     */
    trace() {
        //SOON
    }
    /**
     * @private
     */
    profile() {
        //SOON
    }
    /**
     * @private
     */
    profileEnd() {
        //SOON
    }
}
exports.SrConsole = SrConsole;
exports.default = SrConsole;
